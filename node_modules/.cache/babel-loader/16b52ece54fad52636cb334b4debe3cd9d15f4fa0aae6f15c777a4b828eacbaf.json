{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arnab\\\\filemater-pro\\\\filemaster-frontend\\\\src\\\\components\\\\ConversionOptions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ConversionOptions({\n  onOptionsChange,\n  fileType\n}) {\n  _s();\n  const [format, setFormat] = useState('');\n  const [width, setWidth] = useState('');\n  const [height, setHeight] = useState('');\n  const [quality, setQuality] = useState('');\n  const [bitrate, setBitrate] = useState('');\n  const [resolution, setResolution] = useState('');\n  const [sizeInKB, setSizeInKB] = useState('');\n  const [sizeInMB, setSizeInMB] = useState('');\n  useEffect(() => {\n    // Reset options when fileType changes\n    setFormat('');\n    setWidth('');\n    setHeight('');\n    setQuality('');\n    setBitrate('');\n    setResolution('');\n    setSizeInKB('');\n    setSizeInMB('');\n  }, [fileType]);\n  useEffect(() => {\n    onOptionsChange({\n      format,\n      width: width ? parseInt(width) : undefined,\n      height: height ? parseInt(height) : undefined,\n      quality: quality ? parseInt(quality) : undefined,\n      bitrate: bitrate || undefined,\n      resolution: resolution || undefined,\n      sizeInKB: sizeInKB ? parseInt(sizeInKB) : undefined,\n      sizeInMB: sizeInMB ? parseInt(sizeInMB) : undefined\n    });\n  }, [format, width, height, quality, bitrate, resolution, sizeInKB, sizeInMB, onOptionsChange]);\n  const renderImageOptions = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"options-grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"option-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"imageFormat\",\n        children: \"Convert to:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"imageFormat\",\n        value: format,\n        onChange: e => setFormat(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Original\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"jpeg\",\n          children: \"JPEG\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"png\",\n          children: \"PNG\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"webp\",\n          children: \"WebP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"gif\",\n          children: \"GIF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"bmp\",\n          children: \"BMP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"option-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"width\",\n        children: \"Width (px):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"width\",\n        value: width,\n        onChange: e => setWidth(e.target.value),\n        placeholder: \"e.g., 800\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"option-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"height\",\n        children: \"Height (px):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"height\",\n        value: height,\n        onChange: e => setHeight(e.target.value),\n        placeholder: \"e.g., 600\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"option-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"quality\",\n        children: \"Quality (1-100):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"quality\",\n        value: quality,\n        onChange: e => setQuality(e.target.value),\n        min: \"1\",\n        max: \"100\",\n        placeholder: \"e.g., 80\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"option-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"sizeInKB\",\n        children: \"Resize to (KB):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"sizeInKB\",\n        value: sizeInKB,\n        onChange: e => setSizeInKB(e.target.value),\n        placeholder: \"e.g., 500\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"option-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"sizeInMB\",\n        children: \"Resize to (MB):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"sizeInMB\",\n        value: sizeInMB,\n        onChange: e => setSizeInMB(e.target.value),\n        placeholder: \"e.g., 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n  const renderAudioVideoOptions = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"options-grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"option-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"avFormat\",\n        children: \"Convert to:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"avFormat\",\n        value: format,\n        onChange: e => setFormat(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Original\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), fileType.startsWith('audio') && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"mp3\",\n            children: \"MP3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"wav\",\n            children: \"WAV\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"aac\",\n            children: \"AAC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), fileType.startsWith('video') && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"mp4\",\n            children: \"MP4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"avi\",\n            children: \"AVI\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"mov\",\n            children: \"MOV\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"option-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"bitrate\",\n        children: \"Bitrate (e.g., 128k, 1M):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"bitrate\",\n        value: bitrate,\n        onChange: e => setBitrate(e.target.value),\n        placeholder: \"e.g., 128k (audio), 1M (video)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), fileType.startsWith('video') && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"option-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"resolution\",\n        children: \"Resolution (e.g., 1280x720):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"resolution\",\n        value: resolution,\n        onChange: e => setResolution(e.target.value),\n        placeholder: \"e.g., 1280x720\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n  const renderDocumentOptions = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"options-grid\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"option-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"docFormat\",\n        children: \"Convert to:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"docFormat\",\n        value: format,\n        onChange: e => setFormat(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Original\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), fileType.includes('text/plain') && /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"html\",\n          children: \"HTML\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n  const renderArchiveOptions = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"options-grid\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"option-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"archiveFormat\",\n        children: \"Compress to:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"archiveFormat\",\n        value: format,\n        onChange: e => setFormat(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Original\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"zip\",\n          children: \"ZIP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n  const getOptionsForFileType = () => {\n    if (fileType.startsWith('image/')) {\n      return renderImageOptions();\n    } else if (fileType.startsWith('audio/') || fileType.startsWith('video/')) {\n      return renderAudioVideoOptions();\n    } else if (fileType.includes('text/') || fileType.includes('application/pdf') || fileType.includes('application/msword') || fileType.includes('application/vnd.openxmlformats-officedocument')) {\n      return renderDocumentOptions();\n    } else if (fileType.includes('application/zip') || fileType.includes('application/x-rar-compressed') || fileType.includes('application/gzip')) {\n      return renderArchiveOptions();\n    }\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No specific options available for this file type.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 12\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"conversion-options\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Conversion Options\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), getOptionsForFileType()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n}\n_s(ConversionOptions, \"WX5CA7h6TEISTd/JI8wTTz3RWHs=\");\n_c = ConversionOptions;\nexport default ConversionOptions;\nvar _c;\n$RefreshReg$(_c, \"ConversionOptions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","ConversionOptions","onOptionsChange","fileType","_s","format","setFormat","width","setWidth","height","setHeight","quality","setQuality","bitrate","setBitrate","resolution","setResolution","sizeInKB","setSizeInKB","sizeInMB","setSizeInMB","parseInt","undefined","renderImageOptions","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","value","onChange","e","target","type","placeholder","min","max","renderAudioVideoOptions","startsWith","renderDocumentOptions","includes","renderArchiveOptions","getOptionsForFileType","_c","$RefreshReg$"],"sources":["C:/Users/arnab/filemater-pro/filemaster-frontend/src/components/ConversionOptions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction ConversionOptions({ onOptionsChange, fileType }) {\n  const [format, setFormat] = useState('');\n  const [width, setWidth] = useState('');\n  const [height, setHeight] = useState('');\n  const [quality, setQuality] = useState('');\n  const [bitrate, setBitrate] = useState('');\n  const [resolution, setResolution] = useState('');\n  const [sizeInKB, setSizeInKB] = useState('');\n  const [sizeInMB, setSizeInMB] = useState('');\n\n  useEffect(() => {\n    // Reset options when fileType changes\n    setFormat('');\n    setWidth('');\n    setHeight('');\n    setQuality('');\n    setBitrate('');\n    setResolution('');\n    setSizeInKB('');\n    setSizeInMB('');\n  }, [fileType]);\n\n  useEffect(() => {\n    onOptionsChange({\n      format,\n      width: width ? parseInt(width) : undefined,\n      height: height ? parseInt(height) : undefined,\n      quality: quality ? parseInt(quality) : undefined,\n      bitrate: bitrate || undefined,\n      resolution: resolution || undefined,\n      sizeInKB: sizeInKB ? parseInt(sizeInKB) : undefined,\n      sizeInMB: sizeInMB ? parseInt(sizeInMB) : undefined,\n    });\n  }, [format, width, height, quality, bitrate, resolution, sizeInKB, sizeInMB, onOptionsChange]);\n\n  const renderImageOptions = () => (\n    <div className=\"options-grid\">\n      <div className=\"option-group\">\n        <label htmlFor=\"imageFormat\">Convert to:</label>\n        <select id=\"imageFormat\" value={format} onChange={(e) => setFormat(e.target.value)}>\n          <option value=\"\">Original</option>\n          <option value=\"jpeg\">JPEG</option>\n          <option value=\"png\">PNG</option>\n          <option value=\"webp\">WebP</option>\n          <option value=\"gif\">GIF</option>\n          <option value=\"bmp\">BMP</option>\n        </select>\n      </div>\n      <div className=\"option-group\">\n        <label htmlFor=\"width\">Width (px):</label>\n        <input type=\"number\" id=\"width\" value={width} onChange={(e) => setWidth(e.target.value)} placeholder=\"e.g., 800\" />\n      </div>\n      <div className=\"option-group\">\n        <label htmlFor=\"height\">Height (px):</label>\n        <input type=\"number\" id=\"height\" value={height} onChange={(e) => setHeight(e.target.value)} placeholder=\"e.g., 600\" />\n      </div>\n      <div className=\"option-group\">\n        <label htmlFor=\"quality\">Quality (1-100):</label>\n        <input type=\"number\" id=\"quality\" value={quality} onChange={(e) => setQuality(e.target.value)} min=\"1\" max=\"100\" placeholder=\"e.g., 80\" />\n      </div>\n      <div className=\"option-group\">\n        <label htmlFor=\"sizeInKB\">Resize to (KB):</label>\n        <input type=\"number\" id=\"sizeInKB\" value={sizeInKB} onChange={(e) => setSizeInKB(e.target.value)} placeholder=\"e.g., 500\" />\n      </div>\n      <div className=\"option-group\">\n        <label htmlFor=\"sizeInMB\">Resize to (MB):</label>\n        <input type=\"number\" id=\"sizeInMB\" value={sizeInMB} onChange={(e) => setSizeInMB(e.target.value)} placeholder=\"e.g., 1\" />\n      </div>\n    </div>\n  );\n\n  const renderAudioVideoOptions = () => (\n    <div className=\"options-grid\">\n      <div className=\"option-group\">\n        <label htmlFor=\"avFormat\">Convert to:</label>\n        <select id=\"avFormat\" value={format} onChange={(e) => setFormat(e.target.value)}>\n          <option value=\"\">Original</option>\n          {fileType.startsWith('audio') && (\n            <>\n              <option value=\"mp3\">MP3</option>\n              <option value=\"wav\">WAV</option>\n              <option value=\"aac\">AAC</option>\n            </>\n          )}\n          {fileType.startsWith('video') && (\n            <>\n              <option value=\"mp4\">MP4</option>\n              <option value=\"avi\">AVI</option>\n              <option value=\"mov\">MOV</option>\n            </>\n          )}\n        </select>\n      </div>\n      <div className=\"option-group\">\n        <label htmlFor=\"bitrate\">Bitrate (e.g., 128k, 1M):</label>\n        <input type=\"text\" id=\"bitrate\" value={bitrate} onChange={(e) => setBitrate(e.target.value)} placeholder=\"e.g., 128k (audio), 1M (video)\" />\n      </div>\n      {fileType.startsWith('video') && (\n        <div className=\"option-group\">\n          <label htmlFor=\"resolution\">Resolution (e.g., 1280x720):</label>\n          <input type=\"text\" id=\"resolution\" value={resolution} onChange={(e) => setResolution(e.target.value)} placeholder=\"e.g., 1280x720\" />\n        </div>\n      )}\n    </div>\n  );\n\n  const renderDocumentOptions = () => (\n    <div className=\"options-grid\">\n      <div className=\"option-group\">\n        <label htmlFor=\"docFormat\">Convert to:</label>\n        <select id=\"docFormat\" value={format} onChange={(e) => setFormat(e.target.value)}>\n          <option value=\"\">Original</option>\n          {fileType.includes('text/plain') && <option value=\"html\">HTML</option>}\n          {/* Add more document formats if backend supports them */}\n          {/* <option value=\"pdf\">PDF</option> */}\n          {/* <option value=\"docx\">DOCX</option> */}\n        </select>\n      </div>\n    </div>\n  );\n\n  const renderArchiveOptions = () => (\n    <div className=\"options-grid\">\n      <div className=\"option-group\">\n        <label htmlFor=\"archiveFormat\">Compress to:</label>\n        <select id=\"archiveFormat\" value={format} onChange={(e) => setFormat(e.target.value)}>\n          <option value=\"\">Original</option>\n          <option value=\"zip\">ZIP</option>\n          {/* Add more archive formats if backend supports them */}\n        </select>\n      </div>\n    </div>\n  );\n\n  const getOptionsForFileType = () => {\n    if (fileType.startsWith('image/')) {\n      return renderImageOptions();\n    } else if (fileType.startsWith('audio/') || fileType.startsWith('video/')) {\n      return renderAudioVideoOptions();\n    } else if (fileType.includes('text/') || fileType.includes('application/pdf') || fileType.includes('application/msword') || fileType.includes('application/vnd.openxmlformats-officedocument')) {\n      return renderDocumentOptions();\n    } else if (fileType.includes('application/zip') || fileType.includes('application/x-rar-compressed') || fileType.includes('application/gzip')) {\n      return renderArchiveOptions();\n    }\n    return <p>No specific options available for this file type.</p>;\n  };\n\n  return (\n    <div className=\"conversion-options\">\n      <h3>Conversion Options</h3>\n      {getOptionsForFileType()}\n    </div>\n  );\n}\n\nexport default ConversionOptions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}